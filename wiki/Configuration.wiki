#summary All of the configuration options

== Introduction ==

Below you can find all of the configuration features of the project
== Configuration and usage scenario ===

=== Starting the container ===
Toshiro-IOC is xml driven. The main factory object is `org.toshiroioc.core.XMLBeanFactory` which implements `org.toshiroioc.core.IBeanFactory`. Below is typical usage of the factory:
{{{
var xml:XML = new XML(somexml);
var context:XMLBeanFactory = new XMLBeanFactory(xml);
			
context.initialize();
			
var beanOne:SimpleBean = context.getObject("objectOne");
}}}

and the xml configuration looks like:
{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objects>
	<object id="objectOne" class="org.toshiroioc.test.beans.SimpleBean">
		<property name="booleanItem" value="true"/>
		<property name="stringItem" value="some123String"/>
		<property name="intItem" value="-99999"/>
		<property name="uintItem" value="1111"/>
		<property name="numberItem" value="9999.00001"/>
	</object>
</objects>	
}}}

=== Object retrieval ===

Container allows two ways for retrieving objects:
  * without type checking
  * retrieve object with type check

The method `getObject(id:String):*` returns initialized object without type check. Example:
{{{
var beanOne:SimpleBean = context.getObject("objectOne");
}}}

It is also possible to retrieve object with checking the type on the container site by using the method `getTypedObject(id:String, clazz:Class):*`. It is recommended way of retrieving. Example:
{{{
var clazz4:Class = Class(getDefinitionByName("org.toshiroioc.test.beans.ParentOfSimpleDependencyObject"));
var object4:ParentOfSimpleDependencyObject = context.getTypedObject("object4", clazz4);		
}}}

if the object4 would be not expected type (i.e. `org.toshiroioc.test.beans.ParentOfSimpleDependencyObject`), then the ContainerError will be thrown.

=== Injecting simple types ===
Example setter injection:
{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objects>
	<object id="objectOne" class="org.toshiroioc.test.beans.SimpleBean">
		<property name="booleanItem" value="true"/>
		<property name="stringItem" value="some123String"/>
		<property name="intItem" value="-99999"/>
		<property name="uintItem" value="1111"/>
		<property name="numberItem" value="9999.00001"/>
	</object>
</objects>
}}}

Example constructor injection:
{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objects>
	<object id="objectOne" class="org.toshiroioc.test.beans.BeanWithConstructor">
		<constructor-arg value="-99999"/>
		<constructor-arg value="1111"/>		
		<constructor-arg value="some123String"/>
		<constructor-arg value="true"/>		
		
		...
		
	</object>
</objects>	
}}}

*Constructor arguments order should be keeped as in the object constructor definition.*

=== Injecting date type ===
=== Injecting date type ===